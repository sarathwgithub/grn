Goods Received Note (GRN) system 

Step 1: Setup Laravel Project

composer create-project --prefer-dist laravel/laravel grn_system
cd grn_system
php artisan serve

Step 2: Create a Migration for GRN
php artisan make:migration create_grns_table --create=grns

In the generated migration file, define the schema for the GRN:
class CreateGrnsTable extends Migration
{
    public function up()
    {
        Schema::create('grns', function (Blueprint $table) {
            $table->id();
            $table->string('grn_no');
            $table->string('invoice_no');
            $table->string('supplier_name');           
            $table->text('remark')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('grns');
    }
}

Create a migration for the products table:
php artisan make:migration create_products_table --create=products
class CreateProductsTable extends Migration
{
    public function up()
    {
        Schema::create('products', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('grn_id');
            $table->string('product_name');
            $table->integer('product_qty');
            $table->timestamps();
            
            $table->foreign('grn_id')->references('id')->on('grns')->onDelete('cascade');
        });
    }

    public function down()
    {
        Schema::dropIfExists('products');
    }
}

Run the migration to create the table:
php artisan migrate

Step 3: Create a Model and Controller
php artisan make:model Grn -mcr

Create Product model
php artisan make:model Product

Update the Grn and Product models to define the relationship:
//Grn Model
class Grn extends Model
{
    use HasFactory;

    protected $fillable = ['grn_no', 'invoice_no', 'supplier_name', 'remark'];

    public function products()
    {
        return $this->hasMany(Product::class);
    }
}

//Product Model
class Product extends Model
{
    use HasFactory;

    protected $fillable = ['grn_id', 'product_name', 'product_qty'];

    public function grn()
    {
        return $this->belongsTo(Grn::class);
    }
}

Update the store method in the GrnController to handle multiple products:

<?php

namespace App\Http\Controllers;

use App\Models\Grn;
use App\Models\Product;
use Illuminate\Http\Request;

class GrnController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $grns = Grn::with('products')->get();
        return view('grns.index', compact('grns'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        // Get the last GRN
        $lastGrn = Grn::orderBy('id', 'desc')->first();
        
        // Generate the new GRN number
        $nextGrnNo = $lastGrn ? 'GRN' . sprintf('%05d', (int)substr($lastGrn->grn_no, 3) + 1) : 'GRN00001';
        
        return view('grns.create', compact('nextGrnNo'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $request->validate([
            'invoice_no' => 'required|string|max:255',
            'supplier_name' => 'required|string|max:255',
            'product_name.*' => 'required|string|max:255',
            'product_qty.*' => 'required|integer',
            'remark' => 'nullable|string',
        ]);

        $grn = Grn::create([
            'grn_no' => $request->grn_no,
            'invoice_no' => $request->invoice_no,
            'supplier_name' => $request->supplier_name,
            'remark' => $request->remark,
        ]);

        foreach ($request->product_name as $index => $productName) {
            Product::create([
                'grn_id' => $grn->id,
                'product_name' => $productName,
                'product_qty' => $request->product_qty[$index],
            ]);
        }

        return redirect()->route('grns.index')
            ->with('success', 'GRN created successfully.');
    }

    /**
     * Display the specified resource.
     */
    public function show(Grn $grn)
    {
        $items = $grn->products; // Assuming you have a 'products' relationship in Grn model

        return view('grns.items', compact('grn', 'items'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Grn $grn)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Grn $grn)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Grn $grn)
    {
        //
    }
}

Update the create Blade view to allow dynamic addition of products using JavaScript:

resources/views/grns/create.blade.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
<div class="container">
    <h1>Create GRN</h1>
    <form action="{{ route('grns.store') }}" method="POST">
        @csrf
        <div class="form-group">
            <label for="grn_no">GRN No</label>
            <input type="text" class="form-control" id="grn_no" name="grn_no" value="{{ $nextGrnNo }}" readonly>
        </div>
        <div class="form-group">
            <label for="invoice_no">Invoice No</label>
            <input type="text" class="form-control" id="invoice_no" name="invoice_no" required>
        </div>
        <div class="form-group">
            <label for="supplier_name">Supplier Name</label>
            <input type="text" class="form-control" id="supplier_name" name="supplier_name" required>
        </div>
        
        <div class="form-group">
            <label>Products</label>
            <table class="table" id="product-table">
                <thead>
                    <tr>
                        <th>Product Name</th>
                        <th>Product Quantity</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><input type="text" class="form-control" name="product_name[]" required></td>
                        <td><input type="number" class="form-control" name="product_qty[]" required></td>
                        <td><button type="button" class="btn btn-danger remove-row">Remove</button></td>
                    </tr>
                </tbody>
            </table>
            <button type="button" class="btn btn-success" id="add-row">Add Product</button>
        </div>

        <div class="form-group">
            <label for="remark">Remark</label>
            <textarea class="form-control" id="remark" name="remark"></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const addRowButton = document.getElementById('add-row');
        const productTable = document.getElementById('product-table').getElementsByTagName('tbody')[0];

        addRowButton.addEventListener('click', function () {
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td><input type="text" class="form-control" name="product_name[]" required></td>
                <td><input type="number" class="form-control" name="product_qty[]" required></td>
                <td><button type="button" class="btn btn-danger remove-row">Remove</button></td>
            `;
            productTable.appendChild(newRow);

            newRow.querySelector('.remove-row').addEventListener('click', function () {
                newRow.remove();
            });
        });

        // Attach event listener for removing rows to existing row's remove button
        document.querySelectorAll('.remove-row').forEach(function(button) {
            button.addEventListener('click', function () {
                this.closest('tr').remove();
            });
        });
    });
</script>
</body>
</html>

Routes for your GRN system in the routes/web.php file:
use App\Http\Controllers\GrnController;

// Define resourceful routes for GRN
Route::resource('grns', GrnController::class);

In your GrnController, implement the showItems method to fetch and display the items associated with a GRN:

public function show(Grn $grn)
    {
        $items = $grn->products; // Assuming you have a 'products' relationship in Grn model

        return view('grns.items', compact('grn', 'items'));
    }

Create a view to display the item details. Let's name it items.blade.php:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
<div class="container">
    <h1>Items for GRN: {{ $grn->grn_no }}</h1>
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach($items as $item)
            <tr>
                <td>{{ $item->product_name }}</td>
                <td>{{ $item->product_qty }}</td>
            </tr>
            @endforeach
        </tbody>
    </table>
</div>
</body>
</html>

Link the "View" Button
<a href="{{ route('grns.items.show', $grn->id) }}" class="btn btn-info">View</a>
